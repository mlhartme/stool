# Stool shell code

__projectDir() {
  local dir="$1"
  while [ "${dir}" != "/" ] ; do
    if [ -f "${dir}"/.backstage ] ; then
      echo -n "${dir}"
      return
    fi
    dir="$(dirname "${dir}")"
  done
  echo -n ""
  return
}

__stageIndicator() {
  local project=$(__projectDir $1)
  if [ -f "${project}/.backstage" ] ; then
      local id="$(cat "${project}/.backstage")"
      echo -n "{${id}} "
      return
  else
    # no projects at all -> no indicator
    return
  fi
}

__stageName() {
  grep \"name\" "$1"/config.json | cut -d':' -f2 | cut -d'"' -f2
}

if [ "x$BASH" != "x" ] ; then
    if [ -z "${STOOL_NO_PROMPT}" ] ; then
        if [ -z ${STOOL_OLD_PROMPT_COMMAND} ] ; then
            export STOOL_OLD_PROMPT_COMMAND=${PROMPT_COMMAND}
            __stoolPromptUpdate() {
                eval "${STOOL_OLD_PROMPT_COMMAND}"
                local dir=$(pwd)
                if [ "x${dir}" != "x${__PROJECT_DIR}" ] ; then
                  # cwd has changed, update stage dir
                  export __PROJECT_DIR="$dir"
                fi
                if [ "x${STOOL_PS1}" = "x" ] ; then
                  # We're called for the first time: setup PS1.
                  # Note that we have to delay this setup until the first PROMPT_COMMAND invocation to give users a chance to customize
                  # PS1 settings (e.g. in their ~/.bashrc for interactive shells)
                  export STOOL_PS1="${PS1}"
                  PS1="\$(__stageIndicator \${__PROJECT_DIR})${STOOL_PS1}"
                # else
                #   already initialized, nothing to do
                fi
            }
            PROMPT_COMMAND=__stoolPromptUpdate
        # else
        #   Already initialized, do nothing
        #   CAUTION:
        #   Initializing again would cause an infinite loop because __stoolPromptCommand calls itself ::stoolPromptCommand from $STOOL_OLD_PROMPT_COMMAND
        fi
    # else
    #   do nothing, the user does not want stool prompt
    fi
fi
